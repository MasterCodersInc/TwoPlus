[{"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/index.js":"1","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/App.js":"2","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/reportWebVitals.js":"3","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/firebase.js":"4","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/Editor.js":"5"},{"size":500,"mtime":1612029905944,"results":"6","hashOfConfig":"7"},{"size":337,"mtime":1612051155566,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1612029905944,"results":"9","hashOfConfig":"7"},{"size":653,"mtime":1612031548933,"results":"10","hashOfConfig":"7"},{"size":1006,"mtime":1612051155566,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1huvrus",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/index.js",[],["25","26"],"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/App.js",["27"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Editor from \"./Editor\";\nimport firebase from \"./firebase\";\n\nfirebase.firestore().collection(\"times\").add({\n  title: \"rubiks cube\",\n  time_seconds: 45,\n});\n\nfunction App() {\n  return (\n    <div>\n      <h1>Just Clock It</h1>\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/reportWebVitals.js",[],"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/firebase.js",[],"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/Editor.js",["28"],"import React, { useEffect } from \"react\";\nimport AceEditor from \"react-ace\";\nimport firebase from \"./firebase\";\n\nconst firestore = firebase.firestore();\n\nconst Editor = (props) => {\n  const reactAceRef = React.useRef(null);\n  let editor = null;\n\n  useEffect(() => {\n    editor = reactAceRef.current.editor;\n  }, []);\n\n  firestore\n    .collection(\"collabData\")\n    .doc(\"user1\")\n    .onSnapshot((doc) => {\n      console.log(\"COMING BACK FROM SERVER\", doc.data());\n\n      if (editor) {\n        editor.setValue(doc.data().data, 1);\n      }\n    });\n\n  const sendToFirebase = (data) => {\n    console.log(data);\n    firestore.collection(\"collabData\").doc(\"user1\").set({ data: data });\n  };\n\n  return (\n    <div>\n      <AceEditor ref={reactAceRef} mode=\"javascript\" theme=\"chaos\" />\n      <button\n        onClick={() => {\n          sendToFirebase(editor.getValue());\n        }}\n      >\n        Get Code?\n      </button>\n      <div>GHIYA I AM NOT IN THE ACE EDITOR</div>\n    </div>\n  );\n};\n\nexport default Editor;\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"37","severity":1,"message":"38","line":12,"column":14,"nodeType":"39","endLine":12,"endColumn":40},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'editor' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","no-global-assign","no-unsafe-negation"]