[{"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/index.js":"1","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/App.js":"2","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/reportWebVitals.js":"3","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/firebase.js":"4","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/Editor.js":"5","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/contexts/AuthContext.js":"6","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/components/SignUp.js":"7"},{"size":500,"mtime":1612029905944,"results":"8","hashOfConfig":"9"},{"size":687,"mtime":1612075706818,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1612029905944,"results":"11","hashOfConfig":"9"},{"size":715,"mtime":1612075563531,"results":"12","hashOfConfig":"9"},{"size":1006,"mtime":1612051155566,"results":"13","hashOfConfig":"9"},{"size":917,"mtime":1612075433116,"results":"14","hashOfConfig":"9"},{"size":2545,"mtime":1612075362690,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1huvrus",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/index.js",[],["32","33"],"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/App.js",[],"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/reportWebVitals.js",[],"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/firebase.js",[],"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/Editor.js",["34"],"import React, { useEffect } from \"react\";\nimport AceEditor from \"react-ace\";\nimport firebase from \"./firebase\";\n\nconst firestore = firebase.firestore();\n\nconst Editor = (props) => {\n  const reactAceRef = React.useRef(null);\n  let editor = null;\n\n  useEffect(() => {\n    editor = reactAceRef.current.editor;\n  }, []);\n\n  firestore\n    .collection(\"collabData\")\n    .doc(\"user1\")\n    .onSnapshot((doc) => {\n      console.log(\"COMING BACK FROM SERVER\", doc.data());\n\n      if (editor) {\n        editor.setValue(doc.data().data, 1);\n      }\n    });\n\n  const sendToFirebase = (data) => {\n    console.log(data);\n    firestore.collection(\"collabData\").doc(\"user1\").set({ data: data });\n  };\n\n  return (\n    <div>\n      <AceEditor ref={reactAceRef} mode=\"javascript\" theme=\"chaos\" />\n      <button\n        onClick={() => {\n          sendToFirebase(editor.getValue());\n        }}\n      >\n        Get Code?\n      </button>\n      <div>GHIYA I AM NOT IN THE ACE EDITOR</div>\n    </div>\n  );\n};\n\nexport default Editor;\n","/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/contexts/AuthContext.js",[],"/Users/lindseypak/Desktop/seniorPhase/capstone/firebase-setup/src/components/SignUp.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":12,"column":14,"nodeType":"41","endLine":12,"endColumn":40},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react-hooks/exhaustive-deps","Assignments to the 'editor' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","no-global-assign","no-unsafe-negation"]